import "./chunk-5WWUZCGV.js";

// node_modules/fast-blurhash/index.js
var digit = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz#$%*+,-.:;=?@[]^_{|}~";
var decode83 = (str, start, end) => {
  let value = 0;
  while (start < end) {
    value *= 83;
    value += digit.indexOf(str[start++]);
  }
  return value;
};
var pow = Math.pow;
var PI = Math.PI;
var PI2 = PI * 2;
var d = 3294.6;
var e = 269.025;
var sRGBToLinear = (value) => value > 10.31475 ? pow(value / e + 0.052132, 2.4) : value / d;
var linearTosRGB = (v) => ~~(v > 1227e-8 ? e * pow(v, 0.416666) - 13.025 : v * d + 1);
var signSqr = (x) => (x < 0 ? -1 : 1) * x * x;
var fastCos = (x) => {
  x += PI / 2;
  while (x > PI) {
    x -= PI2;
  }
  const cos = 1.27323954 * x - 0.405284735 * signSqr(x);
  return 0.225 * (signSqr(cos) - cos) + cos;
};
function getBlurHashAverageColor(blurHash) {
  const val = decode83(blurHash, 2, 6);
  return [val >> 16, val >> 8 & 255, val & 255];
}
function decodeBlurHash(blurHash, width, height, punch) {
  const sizeFlag = decode83(blurHash, 0, 1);
  const numX = sizeFlag % 9 + 1;
  const numY = ~~(sizeFlag / 9) + 1;
  const size = numX * numY;
  let i = 0, j = 0, x = 0, y = 0, r = 0, g = 0, b = 0, basis = 0, basisY = 0, colorIndex = 0, pixelIndex = 0, yh = 0, xw = 0, value = 0;
  const maximumValue = (decode83(blurHash, 1, 2) + 1) / 13446 * (punch | 1);
  const colors = new Float64Array(size * 3);
  const averageColor = getBlurHashAverageColor(blurHash);
  for (i = 0; i < 3; i++) {
    colors[i] = sRGBToLinear(averageColor[i]);
  }
  for (i = 1; i < size; i++) {
    value = decode83(blurHash, 4 + i * 2, 6 + i * 2);
    colors[i * 3] = signSqr(~~(value / (19 * 19)) - 9) * maximumValue;
    colors[i * 3 + 1] = signSqr(~~(value / 19) % 19 - 9) * maximumValue;
    colors[i * 3 + 2] = signSqr(value % 19 - 9) * maximumValue;
  }
  const bytesPerRow = width * 4;
  const pixels = new Uint8ClampedArray(bytesPerRow * height);
  for (y = 0; y < height; y++) {
    yh = PI * y / height;
    for (x = 0; x < width; x++) {
      r = 0;
      g = 0;
      b = 0;
      xw = PI * x / width;
      for (j = 0; j < numY; j++) {
        basisY = fastCos(yh * j);
        for (i = 0; i < numX; i++) {
          basis = fastCos(xw * i) * basisY;
          colorIndex = (i + j * numX) * 3;
          r += colors[colorIndex] * basis;
          g += colors[colorIndex + 1] * basis;
          b += colors[colorIndex + 2] * basis;
        }
      }
      pixelIndex = 4 * x + y * bytesPerRow;
      pixels[pixelIndex] = linearTosRGB(r);
      pixels[pixelIndex + 1] = linearTosRGB(g);
      pixels[pixelIndex + 2] = linearTosRGB(b);
      pixels[pixelIndex + 3] = 255;
    }
  }
  return pixels;
}
export {
  decodeBlurHash,
  getBlurHashAverageColor
};
//# sourceMappingURL=fast-blurhash.js.map
