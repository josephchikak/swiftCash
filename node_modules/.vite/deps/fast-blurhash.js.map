{
  "version": 3,
  "sources": ["../../fast-blurhash/index.js"],
  "sourcesContent": ["const digit =\n    '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz#$%*+,-.:;=?@[]^_{|}~';\nconst decode83 = (str, start, end) => {\n    let value = 0;\n    while (start < end) {\n        value *= 83;\n        value += digit.indexOf(str[start++]);\n    }\n    return value;\n};\n\nconst pow = Math.pow;\nconst PI = Math.PI;\nconst PI2 = PI * 2;\n\nconst d = 3294.6;\nconst e = 269.025;\nconst sRGBToLinear = (value) =>\n    value > 10.31475 ? pow(value / e + 0.052132, 2.4) : value / d;\n\nconst linearTosRGB = (v) =>\n    ~~(v > 0.00001227 ? e * pow(v, 0.416666) - 13.025 : v * d + 1);\n\nconst signSqr = (x) => (x < 0 ? -1 : 1) * x * x;\n\n/**\n * Fast approximate cosine implementation\n * Based on FTrig https://github.com/netcell/FTrig\n */\nconst fastCos = (x) => {\n    x += PI / 2;\n    while (x > PI) {\n        x -= PI2;\n    }\n    const cos = 1.27323954 * x - 0.405284735 * signSqr(x);\n    return 0.225 * (signSqr(cos) - cos) + cos;\n};\n\n/**\n * Extracts average color from BlurHash image\n * @param {string} blurHash BlurHash image string\n * @returns {[number, number, number]}\n */\nexport function getBlurHashAverageColor(blurHash) {\n    const val = decode83(blurHash, 2, 6);\n    return [val >> 16, (val >> 8) & 255, val & 255];\n}\n\n/**\n * Decodes BlurHash image\n * @param {string} blurHash BlurHash image string\n * @param {number} width Output image width\n * @param {number} height Output image height\n * @param {?number} punch\n * @returns {Uint8ClampedArray}\n */\nexport function decodeBlurHash(blurHash, width, height, punch) {\n    const sizeFlag = decode83(blurHash, 0, 1);\n    const numX = (sizeFlag % 9) + 1;\n    const numY = ~~(sizeFlag / 9) + 1;\n    const size = numX * numY;\n\n    let i = 0,\n        j = 0,\n        x = 0,\n        y = 0,\n        r = 0,\n        g = 0,\n        b = 0,\n        basis = 0,\n        basisY = 0,\n        colorIndex = 0,\n        pixelIndex = 0,\n        yh = 0,\n        xw = 0,\n        value = 0;\n\n    const maximumValue = ((decode83(blurHash, 1, 2) + 1) / 13446) * (punch | 1);\n\n    const colors = new Float64Array(size * 3);\n\n    const averageColor = getBlurHashAverageColor(blurHash);\n    for (i = 0; i < 3; i++) {\n        colors[i] = sRGBToLinear(averageColor[i]);\n    }\n\n    for (i = 1; i < size; i++) {\n        value = decode83(blurHash, 4 + i * 2, 6 + i * 2);\n        colors[i * 3] = signSqr(~~(value / (19 * 19)) - 9) * maximumValue;\n        colors[i * 3 + 1] = signSqr((~~(value / 19) % 19) - 9) * maximumValue;\n        colors[i * 3 + 2] = signSqr((value % 19) - 9) * maximumValue;\n    }\n\n    const bytesPerRow = width * 4;\n    const pixels = new Uint8ClampedArray(bytesPerRow * height);\n\n    for (y = 0; y < height; y++) {\n        yh = (PI * y) / height;\n        for (x = 0; x < width; x++) {\n            r = 0;\n            g = 0;\n            b = 0;\n            xw = (PI * x) / width;\n\n            for (j = 0; j < numY; j++) {\n                basisY = fastCos(yh * j);\n                for (i = 0; i < numX; i++) {\n                    basis = fastCos(xw * i) * basisY;\n                    colorIndex = (i + j * numX) * 3;\n                    r += colors[colorIndex] * basis;\n                    g += colors[colorIndex + 1] * basis;\n                    b += colors[colorIndex + 2] * basis;\n                }\n            }\n\n            pixelIndex = 4 * x + y * bytesPerRow;\n            pixels[pixelIndex] = linearTosRGB(r);\n            pixels[pixelIndex + 1] = linearTosRGB(g);\n            pixels[pixelIndex + 2] = linearTosRGB(b);\n            pixels[pixelIndex + 3] = 255; // alpha\n        }\n    }\n    return pixels;\n}\n"],
  "mappings": "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",
  "names": []
}
